name: 🔍 CI Check on develop

on:
  pull_request:
    branches: [develop]

jobs:
  check_odoo:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Thêm timeout để tránh job chạy quá lâu

    steps:
      - name: 📥 Lấy source code
        uses: actions/checkout@v4

      - name: 🐍 Cài Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📁 Tạo thư mục reports
        run: mkdir -p reports

      - name: 📦 Cài dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip postgresql-client
          pip install flake8 pylint
      - name: 🧪 Chạy flake8 kiểm tra code (addons + custom_modules)
        id: flake8_check
        run: |
          echo "🔍 Kiểm tra flake8..."
          flake8 ./server/addons ./server/custom_modules \
            --exclude=*/migrations/*,*/__pycache__/* \
            --max-line-length=88 \
            --output-file=reports/flake8_errors.txt || true
          if [ -s reports/flake8_errors.txt ]; then
            echo "has_flake8_errors=true" >> $GITHUB_OUTPUT
          else
            echo "has_flake8_errors=false" >> $GITHUB_OUTPUT
          fi
      - name: 📝 Tạo file .env từ GitHub Secrets
        run: |
          cd server
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          FILESTORE_PATH=${{ secrets.FILESTORE_PATH }}
          EOF
      - name: 🔧 Cài đặt Docker Compose (v2.27.1)
        run: |
          DOCKER_COMPOSE_VERSION="v2.27.1"
          mkdir -p ~/.docker/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo 'export PATH="$HOME/.docker/cli-plugins:$PATH"' >> $GITHUB_ENV
      - name: 🧪 Kiểm tra Docker Compose
        run: docker compose version
      - name: 🐳 Build và chạy Odoo container theo thứ tự chuẩn
        id: docker_build
        run: |
          echo "🚀 Chạy Docker build/test..."
          cd server
          docker compose down -v || true
          docker compose build
          docker compose up -d
          sleep 60
          # Đảm bảo thư mục reports tồn tại
          mkdir -p ../reports
          docker ps > ../reports/docker_ps.txt
      - name: 🔍 Lấy log Odoo từ container
        id: health_check
        run: |
          echo "📦 Ghi log Odoo..."
          
          # Đợi container stable trước khi lấy logs
          echo "⏳ Đợi container stable..."
          for i in {1..10}; do
            container_status=$(docker inspect odoo_app --format='{{.State.Status}}' 2>/dev/null || echo "not_found")
            echo "🔍 Lần $i: Container status = $container_status"
          
            if [ "$container_status" = "running" ]; then
              echo "✅ Container đã stable"
              break
            elif [ "$container_status" = "restarting" ]; then
              echo "⏳ Container đang restart, đợi 15s..."
              sleep 15
            elif [ "$container_status" = "exited" ] || [ "$container_status" = "not_found" ]; then
              echo "❌ Container đã exit hoặc không tồn tại"
              echo "has_log_errors=true" >> $GITHUB_OUTPUT
              echo "Container không chạy được" > reports/log_errors.txt
          
              # Lấy logs ngay cả khi container đã exit
              docker logs odoo_app > reports/odoo_full_logs.txt 2>&1 || true
              exit 0
            fi
          
            if [ $i -eq 10 ]; then
              echo "❌ Timeout: Container không stable sau 10 lần thử"
              echo "has_log_errors=true" >> $GITHUB_OUTPUT
              echo "Container restart liên tục" > reports/log_errors.txt
          
              # Vẫn cố gắng lấy logs
              docker logs odoo_app > reports/odoo_full_logs.txt 2>&1 || true
              exit 0
            fi
          done
          
          # Kiểm tra container có đang chạy không
          if ! docker ps | grep -q odoo_app; then
            echo "❌ Container odoo_app không chạy"
            echo "has_log_errors=true" >> $GITHUB_OUTPUT
            echo "Container odoo_app không chạy" > reports/log_errors.txt
            # Lấy logs từ container đã stopped
            docker logs odoo_app > reports/odoo_full_logs.txt 2>&1 || true
            exit 0
          fi
          
          # Lấy logs với timeout và retry
          echo "📥 Lấy full logs..."
          for attempt in {1..3}; do
            if timeout 60 docker logs odoo_app > reports/odoo_full_logs.txt 2>&1; then
              echo "✅ Lấy full logs thành công lần $attempt"
              break
            else
              echo "⚠️ Lấy full logs thất bại lần $attempt"
              sleep 5
            fi
          done
          
          # Lấy logs gần nhất
          echo "📥 Lấy tail logs..."
          if docker exec odoo_app test -f /var/log/odoo/odoo.log 2>/dev/null; then
            echo "📄 Lấy từ log file trong container"
            docker exec odoo_app tail -n 100 /var/log/odoo/odoo.log > reports/odoo_tail_100.txt 2>/dev/null || true
          else
            echo "📄 Lấy từ docker logs"
            docker logs --tail 100 odoo_app > reports/odoo_tail_100.txt 2>&1 || true
          fi
          
          # Kiểm tra lỗi trong logs
          if [ -f reports/odoo_tail_100.txt ] && grep -Ei "ERROR|CRITICAL|Traceback|Exception|failed|cannot|refused" reports/odoo_tail_100.txt > reports/log_errors.txt; then
            echo "has_log_errors=true" >> $GITHUB_OUTPUT
            echo "🔍 Tìm thấy $(wc -l < reports/log_errors.txt) dòng lỗi trong logs"
          else
            echo "has_log_errors=false" >> $GITHUB_OUTPUT
            touch reports/log_errors.txt  # Tạo file rỗng để tránh lỗi attachment
            echo "✅ Không tìm thấy lỗi critical trong logs"
          fi
          
          # Thêm container inspect để debug
          echo "🔍 Thu thập thông tin container..."
          docker inspect odoo_app > reports/container_inspect.txt 2>&1 || true
      # Thay thế kiểm tra HTTP bằng nhiều phương pháp
      - name: 🌐 Kiểm tra Odoo service (Multiple methods)
        id: service_check
        run: |
          cd server
          service_available=false
      
          echo "🔍 Phương pháp 1: Kiểm tra container health"
          if ~/.docker/cli-plugins/docker-compose ps | grep -q "odoo_app.*Up.*healthy\|odoo_app.*Up" && ! ~/.docker/cli-plugins/docker-compose ps | grep -q "odoo_app.*Exit"; then
            echo "✅ Container đang chạy bình thường"
            service_available=true
          fi
      
          echo "🔍 Phương pháp 2: Kiểm tra port binding"
          if ss -tulpn | grep -q ":8069"; then
            echo "✅ Port 8069 đang được bind"
            service_available=true
          fi
      
          echo "🔍 Phương pháp 3: Kiểm tra process Odoo trong container"
          if ~/.docker/cli-plugins/docker-compose exec -T odoo_app pgrep -f "odoo" > /dev/null 2>&1; then
            echo "✅ Process Odoo đang chạy trong container"
            service_available=true
          fi
      
          echo "🔍 Phương pháp 4: Kiểm tra HTTP (fallback)"
          for i in {1..3}; do
            if curl -sSf --connect-timeout 10 --max-time 30 http://localhost:8069/web/health > /dev/null 2>&1; then
              echo "✅ HTTP health check thành công"
              service_available=true
              break
            elif curl -sSf --connect-timeout 10 --max-time 30 http://localhost:8069/ > /dev/null 2>&1; then
              echo "✅ HTTP root check thành công"
              service_available=true
              break
            fi
            echo "⏳ HTTP thử lại lần $i..."
            sleep 20
          done
      
          if [ "$service_available" = true ]; then
            echo "service_available=true" >> $GITHUB_OUTPUT
            echo "✅ Odoo service kiểm tra thành công"
          else
            echo "service_available=false" >> $GITHUB_OUTPUT
            echo "❌ Odoo service không phản hồi qua tất cả phương pháp"
      
            # Thu thập thêm thông tin debug
            echo "=== DEBUG INFO ===" > ../reports/debug_info.txt
            echo "Container status:" >> ../reports/debug_info.txt
            ~/.docker/cli-plugins/docker-compose ps >> ../reports/debug_info.txt 2>&1 || true
            echo -e "\nPort status:" >> ../reports/debug_info.txt
            ss -tulpn | grep 8069 >> ../reports/debug_info.txt 2>&1 || echo "Port 8069 not found" >> ../reports/debug_info.txt
            echo -e "\nContainer logs (last 20 lines):" >> ../reports/debug_info.txt
            ~/.docker/cli-plugins/docker-compose logs --tail 20 odoo_app >> ../reports/debug_info.txt 2>&1 || true
          fi
      - name: 🧹 Cleanup Docker
        if: always()
        run: |
          cd server || true
          docker compose down -v || true
          docker system prune -f || true
      - name: 📋 Tạo báo cáo CI tổng hợp
        if: always()
        run: |
          # Đảm bảo tất cả file report tồn tại
          touch reports/flake8_errors.txt
          touch reports/log_errors.txt
          touch reports/odoo_tail_50.txt
          touch reports/docker_ps.txt
          touch reports/debug_info.txt
          
          echo "## 📊 CI Check Results" > reports/ci_summary.txt
          echo "- **Flake8 Check**: ${{ steps.flake8_check.outputs.has_flake8_errors == 'true' && '❌ Có lỗi' || '✅ Passed' }}" >> reports/ci_summary.txt
          echo "- **Docker Build**: ${{ steps.docker_build.outcome == 'success' && '✅ Success' || '❌ Failed' }}" >> reports/ci_summary.txt
          echo "- **Log Odoo**: ${{ steps.health_check.outputs.has_log_errors == 'true' && '❌ Có lỗi' || '✅ Clean' }}" >> reports/ci_summary.txt
          echo "- **Service Check**: ${{ steps.service_check.outputs.service_available == 'true' && '✅ OK' || '❌ Không phản hồi' }}" >> reports/ci_summary.txt
      - name: 📧 Gửi email kết quả CI
        if: always()
        uses: dawidd6/action-send-mail@v3
        continue-on-error: true  # Không fail job nếu email không gửi được
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ job.status == 'success' && '✅ CI PASSED' || '❌ CI FAILED' }} - PR #${{ github.event.number }}
          to: ${{ secrets.USER_CI_NOTIFY }}
          from: "Odoo CI Bot <${{ secrets.SMTP_USERNAME }}>"
          body: |
            Xin chào,
            
            CI đã chạy trên PR #${{ github.event.number }}: "${{ github.event.pull_request.title }}"
            
            **Thông tin PR:**
            - Tác giả: ${{ github.event.pull_request.user.login }}
            - Branch: ${{ github.head_ref }} → develop
            - Commit: ${{ github.sha }}
            
            **Kết quả tổng hợp:**
            - Flake8: ${{ steps.flake8_check.outputs.has_flake8_errors == 'true' && '❌ Có lỗi' || '✅ Passed' }}
            - Docker Build: ${{ steps.docker_build.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Log Odoo: ${{ steps.health_check.outputs.has_log_errors == 'true' && '❌ Có lỗi' || '✅ Clean' }}
            - Odoo Service: ${{ steps.service_check.outputs.service_available == 'true' && '✅ OK' || '❌ Không phản hồi' }}
            
            ${{ job.status != 'success' && '⚠️ Vui lòng kiểm tra và sửa lỗi trước khi merge.' || '🚀 Sẵn sàng merge!' }}
            
            **Link PR:** 
            - PR: ${{ github.event.pull_request.html_url }}
            - Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Trân trọng,  
            Odoo CI Bot 🤖
          attachments: reports/flake8_errors.txt,reports/log_errors.txt,reports/odoo_tail_50.txt,reports/ci_summary.txt,reports/docker_ps.txt,reports/debug_info.txt