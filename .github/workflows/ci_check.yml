name: 🔍 CI Check on develop

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

jobs:
  check_odoo:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Lấy source code
        uses: actions/checkout@v4

      # Cache Python dependencies để tránh cài lại
      - name: 🐍 Cài Python 3.12 với cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 📁 Tạo thư mục reports
        run: mkdir -p reports

      # Cache apt packages
      - name: 📦 Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: python3-pip postgresql-client
          version: 1.0

      - name: 📦 Cài Python dependencies với cache
        run: |
          pip install --cache-dir ~/.cache/pip flake8 pylint

      - name: 🧪 Chạy flake8 kiểm tra code (addons + custom_modules)
        id: flake8_check
        run: |
          echo "🔍 Kiểm tra flake8..."
          flake8 ./server/addons ./server/custom_modules \
            --exclude=*/migrations/*,*/__pycache__/* \
            --max-line-length=88 \
            --output-file=reports/flake8_errors.txt || true
          if [ -s reports/flake8_errors.txt ]; then
            echo "has_flake8_errors=true" >> $GITHUB_OUTPUT
          else
            echo "has_flake8_errors=false" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Tạo file .env từ GitHub Secrets
        run: |
          cd server
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          FILESTORE_PATH=${{ secrets.FILESTORE_PATH }}
          EOF

      # Cache Docker Compose binary
      - name: 🔧 Cache và cài Docker Compose
        id: docker-compose-cache
        uses: actions/cache@v3
        with:
          path: ~/.docker/cli-plugins/docker-compose
          key: docker-compose-v2.27.1

      - name: 🔧 Cài Docker Compose nếu chưa có cache
        if: steps.docker-compose-cache.outputs.cache-hit != 'true'
        run: |
          DOCKER_COMPOSE_VERSION="v2.27.1"
          mkdir -p ~/.docker/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: 🧪 Kiểm tra Docker Compose
        run: |
          chmod +x ~/.docker/cli-plugins/docker-compose
          ~/.docker/cli-plugins/docker-compose version

      # Cache Docker layers
      - name: 🐳 Setup Docker Buildx với cache
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build và chạy Odoo container
        id: docker_build
        run: |
          echo "🚀 Chạy Docker build/test..."
          cd server
          ~/.docker/cli-plugins/docker-compose down -v || true
          
          # Build với cache
          ~/.docker/cli-plugins/docker-compose build --parallel
          ~/.docker/cli-plugins/docker-compose up -d
          
          # Tăng thời gian chờ và kiểm tra container status
          echo "⏳ Chờ containers khởi động..."
          sleep 30
          
          # Kiểm tra container có chạy không
          for i in {1..6}; do
            if ~/.docker/cli-plugins/docker-compose ps | grep -q "Up"; then
              echo "✅ Containers đang chạy"
              break
            fi
            echo "⏳ Chờ containers... ($i/6)"
            sleep 30
          done
          
          mkdir -p ../reports
          ~/.docker/cli-plugins/docker-compose ps > ../reports/docker_ps.txt

      - name: 🔍 Lấy log Odoo từ container
        id: health_check
        run: |
          echo "📦 Ghi log Odoo..."
          cd server
          
          # Kiểm tra container có đang chạy không
          if ! ~/.docker/cli-plugins/docker-compose ps | grep -q "odoo_app.*Up"; then
            echo "❌ Container odoo_app không chạy hoặc unhealthy"
            echo "has_log_errors=true" >> $GITHUB_OUTPUT
            ~/.docker/cli-plugins/docker-compose logs > ../reports/docker_compose_logs.txt 2>&1 || true
            echo "Container odoo_app không chạy" > ../reports/log_errors.txt
            exit 0
          fi
          
          # Lấy logs với timeout
          timeout 60 ~/.docker/cli-plugins/docker-compose logs odoo_app > ../reports/odoo_full_logs.txt 2>&1 || true
          
          # Lấy log cuối
          ~/.docker/cli-plugins/docker-compose logs --tail 50 odoo_app > ../reports/odoo_tail_50.txt 2>&1 || true
          
          if [ -f ../reports/odoo_tail_50.txt ] && grep -Ei "ERROR|CRITICAL|Traceback|Exception" ../reports/odoo_tail_50.txt > ../reports/log_errors.txt; then
            echo "has_log_errors=true" >> $GITHUB_OUTPUT
          else
            echo "has_log_errors=false" >> $GITHUB_OUTPUT
            touch ../reports/log_errors.txt
          fi

      # Thay thế kiểm tra HTTP bằng nhiều phương pháp
      - name: 🌐 Kiểm tra Odoo service (Multiple methods)
        id: service_check
        run: |
          cd server
          service_available=false
          
          echo "🔍 Phương pháp 1: Kiểm tra container health"
          if ~/.docker/cli-plugins/docker-compose ps | grep -q "odoo_app.*Up.*healthy\|odoo_app.*Up" && ! ~/.docker/cli-plugins/docker-compose ps | grep -q "odoo_app.*Exit"; then
            echo "✅ Container đang chạy bình thường"
            service_available=true
          fi
          
          echo "🔍 Phương pháp 2: Kiểm tra port binding"
          if ss -tulpn | grep -q ":8069"; then
            echo "✅ Port 8069 đang được bind"
            service_available=true
          fi
          
          echo "🔍 Phương pháp 3: Kiểm tra process Odoo trong container"
          if ~/.docker/cli-plugins/docker-compose exec -T odoo_app pgrep -f "odoo" > /dev/null 2>&1; then
            echo "✅ Process Odoo đang chạy trong container"
            service_available=true
          fi
          
          echo "🔍 Phương pháp 4: Kiểm tra HTTP (fallback)"
          for i in {1..3}; do
            if curl -sSf --connect-timeout 10 --max-time 30 http://localhost:8069/web/health > /dev/null 2>&1; then
              echo "✅ HTTP health check thành công"
              service_available=true
              break
            elif curl -sSf --connect-timeout 10 --max-time 30 http://localhost:8069/ > /dev/null 2>&1; then
              echo "✅ HTTP root check thành công"
              service_available=true
              break
            fi
            echo "⏳ HTTP thử lại lần $i..."
            sleep 20
          done
          
          if [ "$service_available" = true ]; then
            echo "service_available=true" >> $GITHUB_OUTPUT
            echo "✅ Odoo service kiểm tra thành công"
          else
            echo "service_available=false" >> $GITHUB_OUTPUT
            echo "❌ Odoo service không phản hồi qua tất cả phương pháp"
            
            # Thu thập thêm thông tin debug
            echo "=== DEBUG INFO ===" > ../reports/debug_info.txt
            echo "Container status:" >> ../reports/debug_info.txt
            ~/.docker/cli-plugins/docker-compose ps >> ../reports/debug_info.txt 2>&1 || true
            echo -e "\nPort status:" >> ../reports/debug_info.txt
            ss -tulpn | grep 8069 >> ../reports/debug_info.txt 2>&1 || echo "Port 8069 not found" >> ../reports/debug_info.txt
            echo -e "\nContainer logs (last 20 lines):" >> ../reports/debug_info.txt
            ~/.docker/cli-plugins/docker-compose logs --tail 20 odoo_app >> ../reports/debug_info.txt 2>&1 || true
          fi

      - name: 🧹 Cleanup Docker
        if: always()
        run: |
          cd server || true
          ~/.docker/cli-plugins/docker-compose down -v || true
          docker system prune -f || true

      - name: 📋 Tạo báo cáo CI tổng hợp
        if: always()
        run: |
          # Đảm bảo tất cả file report tồn tại
          touch reports/flake8_errors.txt
          touch reports/log_errors.txt
          touch reports/odoo_tail_50.txt
          touch reports/docker_ps.txt
          touch reports/debug_info.txt
          
          echo "## 📊 CI Check Results" > reports/ci_summary.txt
          echo "**Timestamp**: $(date)" >> reports/ci_summary.txt
          echo "**PR**: #${{ github.event.number }} - ${{ github.event.pull_request.title }}" >> reports/ci_summary.txt
          echo "**Branch**: ${{ github.head_ref }} → develop" >> reports/ci_summary.txt
          echo "" >> reports/ci_summary.txt
          echo "### 🔍 Kết quả kiểm tra:" >> reports/ci_summary.txt
          echo "- **Flake8 Check**: ${{ steps.flake8_check.outputs.has_flake8_errors == 'true' && '❌ Có lỗi' || '✅ Passed' }}" >> reports/ci_summary.txt
          echo "- **Docker Build**: ${{ steps.docker_build.outcome == 'success' && '✅ Success' || '❌ Failed' }}" >> reports/ci_summary.txt
          echo "- **Odoo Logs**: ${{ steps.health_check.outputs.has_log_errors == 'true' && '❌ Có lỗi' || '✅ Clean' }}" >> reports/ci_summary.txt
          echo "- **Service Check**: ${{ steps.service_check.outputs.service_available == 'true' && '✅ Available' || '❌ Không phản hồi' }}" >> reports/ci_summary.txt
          echo "" >> reports/ci_summary.txt
          echo "### 📁 Files attached:" >> reports/ci_summary.txt
          echo "- flake8_errors.txt: Lỗi code style" >> reports/ci_summary.txt
          echo "- log_errors.txt: Lỗi trong Odoo logs" >> reports/ci_summary.txt
          echo "- odoo_tail_50.txt: 50 dòng log cuối của Odoo" >> reports/ci_summary.txt
          echo "- docker_ps.txt: Trạng thái containers" >> reports/ci_summary.txt
          echo "- debug_info.txt: Thông tin debug chi tiết" >> reports/ci_summary.txt

      - name: 📧 Gửi email kết quả CI
        if: always()
        uses: dawidd6/action-send-mail@v3
        continue-on-error: true
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ job.status == 'success' && '✅ CI PASSED' || '❌ CI FAILED' }} - PR #${{ github.event.number }}
          to: ${{ secrets.USER_CI_NOTIFY }}
          from: "Odoo CI Bot <${{ secrets.SMTP_USERNAME }}>"
          body: |
            Xin chào,
            
            🔍 CI Report cho PR #${{ github.event.number }}: "${{ github.event.pull_request.title }}"
            
            **📋 Thông tin PR:**
            - 👤 Tác giả: ${{ github.event.pull_request.user.login }}
            - 🌿 Branch: ${{ github.head_ref }} → develop
            - 📝 Commit: ${{ github.sha }}
            - 🕐 Thời gian: $(date)
            
            **📊 Kết quả chi tiết:**
            - 🎨 Flake8: ${{ steps.flake8_check.outputs.has_flake8_errors == 'true' && '❌ Có lỗi code style' || '✅ Code style OK' }}
            - 🐳 Docker Build: ${{ steps.docker_build.outcome == 'success' && '✅ Build thành công' || '❌ Build thất bại' }}
            - 📋 Odoo Logs: ${{ steps.health_check.outputs.has_log_errors == 'true' && '❌ Có lỗi trong logs' || '✅ Logs sạch' }}
            - 🌐 Service: ${{ steps.service_check.outputs.service_available == 'true' && '✅ Service hoạt động' || '⚠️ Service không phản hồi (có thể do network)' }}
            
            ${{ job.status != 'success' && '⚠️ **Cần xem xét:** Vui lòng kiểm tra các file đính kèm để biết chi tiết lỗi.' || '🚀 **Sẵn sàng merge!** Tất cả kiểm tra đã pass.' }}
            
            **🔗 Links:**
            - PR: ${{ github.event.pull_request.html_url }}
            - Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            **📎 Files đính kèm:**
            - ci_summary.txt: Tóm tắt kết quả
            - debug_info.txt: Thông tin debug chi tiết
            - Các file logs khác
            
            Trân trọng,  
            🤖 Odoo CI Bot
          attachments: reports/ci_summary.txt,reports/debug_info.txt,reports/flake8_errors.txt,reports/log_errors.txt,reports/odoo_tail_50.txt,reports/docker_ps.txt