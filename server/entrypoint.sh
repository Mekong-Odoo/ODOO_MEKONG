#!/bin/bash
set -e

# Thi·∫øt l·∫≠p locale ƒë·ªÉ tr√°nh c·∫£nh b√°o
export LC_ALL=C.UTF-8
export LANG=C.UTF-8

# Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ tr√°nh l·ªói HTTP server
export PYTHONUNBUFFERED=1
export GEVENT_SUPPORT=True

# File marker ƒë·ªÉ theo d√µi tr·∫°ng th√°i kh·ªüi t·∫°o
INIT_MARKER="/var/lib/odoo/.odoo_initialized"
DB_READY_MARKER="/var/lib/odoo/.db_ready_${DB_NAME}"

echo "üîç ƒêang ki·ªÉm tra c√†i ƒë·∫∑t Odoo..."

# T√¨m ƒë√∫ng ƒë∆∞·ªùng d·∫´n t·ªõi binary Odoo
if [ -f "/usr/bin/odoo" ]; then
    ODOO_CMD="/usr/bin/odoo"
elif [ -f "/usr/local/bin/odoo" ]; then
    ODOO_CMD="/usr/local/bin/odoo"
elif [ -f "/opt/odoo/odoo-bin" ]; then
    ODOO_CMD="/opt/odoo/odoo-bin"
elif command -v odoo > /dev/null 2>&1; then
    ODOO_CMD="odoo"
elif command -v odoo-bin > /dev/null 2>&1; then
    ODOO_CMD="odoo-bin"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y binary Odoo!"
    ODOO_BIN_PATH=$(find / -name "odoo*" -type f -executable 2>/dev/null | head -n 1)
    if [ -n "$ODOO_BIN_PATH" ]; then
        ODOO_CMD="$ODOO_BIN_PATH"
        echo "‚úÖ T√¨m th·∫•y binary Odoo t·∫°i: $ODOO_CMD"
    else
        echo "‚ùå Kh√¥ng t√¨m th·∫•y binary Odoo!"
        exit 1
    fi
fi

echo "üîß S·ª≠ d·ª•ng binary Odoo: $ODOO_CMD"

# Ki·ªÉm tra v√† s·ª≠a l·ªói th∆∞ vi·ªán Python
fix_python_issues() {
    echo "üîß Ki·ªÉm tra v√† s·ª≠a l·ªói th∆∞ vi·ªán Python..."

    # Ki·ªÉm tra phi√™n b·∫£n Werkzeug
    python3 -c "import werkzeug; print(f'Werkzeug version: {werkzeug.__version__}')" 2>/dev/null || {
        echo "‚ö†Ô∏è L·ªói import Werkzeug, c√†i ƒë·∫∑t l·∫°i..."
        pip3 install --no-cache-dir --break-system-packages --force-reinstall werkzeug==2.0.3
    }

    # Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt kh√°c
    python3 -c "
import sys
try:
    import gevent
    import eventlet
    print('‚úÖ Gevent v√† Eventlet s·∫µn s√†ng')
except ImportError as e:
    print(f'‚ö†Ô∏è Thi·∫øu th∆∞ vi·ªán: {e}')
    sys.exit(1)
" || {
        echo "üîß C√†i ƒë·∫∑t l·∫°i c√°c th∆∞ vi·ªán HTTP server..."
        pip3 install --no-cache-dir --break-system-packages gevent eventlet
    }
}

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt m·ªôt l·∫ßn duy nh·∫•t
setup_directories() {
    echo "üîß Thi·∫øt l·∫≠p th∆∞ m·ª•c..."
    if [ "$(id -u)" = "0" ]; then
        mkdir -p /var/run/odoo /var/log/odoo /var/lib/odoo
        mkdir -p /var/lib/odoo/filestore/${DB_NAME}
        mkdir -p /var/lib/odoo/sessions
        chown -R odoo:odoo /var/run/odoo /var/log/odoo /var/lib/odoo
        chmod -R 775 /var/lib/odoo
        echo "‚úÖ ƒê√£ thi·∫øt l·∫≠p th∆∞ m·ª•c v·ªõi quy·ªÅn root"
    else
        mkdir -p /var/lib/odoo/filestore/${DB_NAME}
        mkdir -p /var/lib/odoo/sessions
        echo "‚úÖ ƒê√£ thi·∫øt l·∫≠p th∆∞ m·ª•c c∆° b·∫£n"
    fi
}

# T·∫°o file c·∫•u h√¨nh v·ªõi c√°c tham s·ªë HTTP server ƒë∆∞·ª£c t·ªëi ∆∞u - KH√îNG tr√πng l·∫∑p
setup_config() {
    echo "üîß T·∫°o file c·∫•u h√¨nh..."

    # T·∫°o config trong th∆∞ m·ª•c tmp tr∆∞·ªõc, sau ƒë√≥ copy ƒë·ªÉ tr√°nh l·ªói quy·ªÅn
    local temp_config="/tmp/odoo.conf"

    if [ -f "/etc/odoo/odoo.conf.template" ]; then
        # S·ª≠ d·ª•ng template c√≥ s·∫µn
        envsubst < /etc/odoo/odoo.conf.template > "$temp_config"
        echo "‚úÖ ƒê√£ t·∫°o config t·ª´ template"

        # Ki·ªÉm tra v√† th√™m c√°c t√πy ch·ªçn n·∫øu ch∆∞a c√≥
        echo "üîß Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c t√πy ch·ªçn c·∫•u h√¨nh..."

        # H√†m ƒë·ªÉ th√™m ho·∫∑c c·∫≠p nh·∫≠t t√πy ch·ªçn trong file config (s·ª≠ d·ª•ng temp file)
        update_config_option() {
            local option=$1
            local value=$2
            local config_file="$temp_config"

            if grep -q "^${option}\s*=" "$config_file"; then
                # T√πy ch·ªçn ƒë√£ t·ªìn t·∫°i, t·∫°o file m·ªõi thay v√¨ sed in-place
                grep -v "^${option}\s*=" "$config_file" > "${config_file}.tmp"
                echo "${option} = ${value}" >> "${config_file}.tmp"
                mv "${config_file}.tmp" "$config_file"
                echo "  ‚Üª C·∫≠p nh·∫≠t: ${option} = ${value}"
            else
                # T√πy ch·ªçn ch∆∞a t·ªìn t·∫°i, th√™m v√†o
                echo "${option} = ${value}" >> "$config_file"
                echo "  Ôºã Th√™m: ${option} = ${value}"
            fi
        }

        # C·∫≠p nh·∫≠t c√°c t√πy ch·ªçn HTTP server
        update_config_option "max_cron_threads" "2"
        update_config_option "workers" "0"
        update_config_option "server_wide_modules" "base,web"
        update_config_option "proxy_mode" "True"

    else
        # T·∫°o config c∆° b·∫£n n·∫øu kh√¥ng c√≥ template
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y template, t·∫°o config c∆° b·∫£n..."
        cat > "$temp_config" << EOF
[options]
addons_path = /usr/lib/python3/dist-packages/odoo/addons,/mnt/custom_modules
data_dir = /var/lib/odoo
db_host = ${DB_HOST:-localhost}
db_port = ${DB_PORT:-5432}
db_user = ${DB_USER:-odoo}
db_password = ${DB_PASSWORD:-odoo}
logfile = /var/log/odoo/odoo.log
log_level = info
max_cron_threads = 2
workers = 0
server_wide_modules = base,web
proxy_mode = True
EOF
    fi

    # Copy file config t·ª´ temp sang v·ªã tr√≠ cu·ªëi c√πng
    cp "$temp_config" /etc/odoo/odoo.conf
    chmod 644 /etc/odoo/odoo.conf

    if [ "$(id -u)" = "0" ]; then
        chown odoo:odoo /etc/odoo/odoo.conf
    fi

    # X√≥a temp file
    rm -f "$temp_config" "${temp_config}.tmp"

    echo "‚úÖ File c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi t·ªëi ∆∞u HTTP server (kh√¥ng tr√πng l·∫∑p)"

    # Hi·ªÉn th·ªã n·ªôi dung config ƒë·ªÉ debug
    echo "üìã N·ªôi dung file c·∫•u h√¨nh:"
    cat /etc/odoo/odoo.conf | head -20
}

# Ki·ªÉm tra k·∫øt n·ªëi PostgreSQL v·ªõi timeout ng·∫Øn h∆°n
check_postgres() {
    echo "üîç Ki·ªÉm tra k·∫øt n·ªëi PostgreSQL..."
    local max_retries=3
    local counter=0
    local wait_time=2

    while ! PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d postgres -c "SELECT 1" > /dev/null 2>&1; do
        counter=$((counter+1))
        if [ $counter -ge $max_retries ]; then
            echo "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi PostgreSQL sau $max_retries l·∫ßn th·ª≠."
            return 1
        fi
        echo "‚è≥ ƒê·ª£i PostgreSQL... ($counter/$max_retries)"
        sleep $wait_time
    done

    echo "‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng"
    return 0
}

# Ki·ªÉm tra database ƒë√£ t·ªìn t·∫°i v√† ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
check_database_status() {
    local db_exists=false
    local db_initialized=false

    # Ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
    if PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d postgres -c \
        "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1; then
        db_exists=true
        echo "‚úÖ Database ${DB_NAME} ƒë√£ t·ªìn t·∫°i"

        # Ki·ªÉm tra database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a (c√≥ b·∫£ng ir_module_module)
        if PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} \
            -c "SELECT 1 FROM pg_tables WHERE tablename = 'ir_module_module';" | grep -q 1; then

            # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 module ƒë∆∞·ª£c c√†i ƒë·∫∑t
            local installed_count=$(PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -t \
                -c "SELECT COUNT(*) FROM ir_module_module WHERE state='installed';")

            if [ "$installed_count" -gt 0 ]; then
                db_initialized=true
                echo "‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi $installed_count module"

                # T·∫°o marker file
                touch "$DB_READY_MARKER"
            fi
        fi
    fi

    echo "$db_exists,$db_initialized"
}

# Kh·ªüi t·∫°o database ch·ªâ khi c·∫ßn thi·∫øt v·ªõi HTTP server t·ªëi ∆∞u
initialize_database() {
    echo "‚öôÔ∏è Kh·ªüi t·∫°o database ${DB_NAME}..."

    # T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
    if ! PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d postgres -c \
        "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1; then
        echo "üì¶ T·∫°o database ${DB_NAME}..."
        PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d postgres -c \
            "CREATE DATABASE \"${DB_NAME}\" OWNER \"${DB_USER}\";"
    fi

    # Kh·ªüi t·∫°o v·ªõi module c∆° b·∫£n v√† worker = 0 ƒë·ªÉ tr√°nh l·ªói HTTP
    echo "üì¶ C√†i ƒë·∫∑t module c∆° b·∫£n (base, web)..."
    local core_modules="base,web"

    if [ "$(id -u)" = "0" ]; then
        gosu odoo $ODOO_CMD -c /etc/odoo/odoo.conf -d ${DB_NAME} -i ${core_modules} --stop-after-init --log-level=warn --workers=0
    else
        $ODOO_CMD -c /etc/odoo/odoo.conf -d ${DB_NAME} -i ${core_modules} --stop-after-init --log-level=warn --workers=0
    fi

    # T·∫°o marker ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ kh·ªüi t·∫°o
    touch "$DB_READY_MARKER"
    echo "‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o"
}

# Ki·ªÉm tra filestore nhanh v√† hi·ªáu qu·∫£
quick_filestore_check() {
    echo "üîç Ki·ªÉm tra nhanh filestore..."

    local filestore_path="/var/lib/odoo/filestore/${DB_NAME}"

    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    if [ ! -d "$filestore_path" ]; then
        echo "üìÅ T·∫°o th∆∞ m·ª•c filestore..."
        mkdir -p "$filestore_path"
        if [ "$(id -u)" = "0" ]; then
            chown -R odoo:odoo "$filestore_path"
        fi
        chmod -R 775 "$filestore_path"
    fi

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p c∆° b·∫£n
    if [ -w "$filestore_path" ]; then
        echo "‚úÖ Filestore c√≥ th·ªÉ ghi"

        # Ch·∫°y script ki·ªÉm tra chi ti·∫øt trong background (kh√¥ng ch·∫∑n kh·ªüi ƒë·ªông)
        if [ -f "/usr/local/bin/fix_file_references.py" ]; then
            echo "üîß Ch·∫°y ki·ªÉm tra filestore trong background..."
            export FILESTORE_PATH=/var/lib/odoo/filestore

            if [ "$(id -u)" = "0" ]; then
                (gosu odoo python3 /usr/local/bin/fix_file_references.py > /var/log/odoo/filestore_check.log 2>&1 &)
            else
                (python3 /usr/local/bin/fix_file_references.py > /var/log/odoo/filestore_check.log 2>&1 &)
            fi
        fi
    else
        echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ghi v√†o filestore, s·ª≠a quy·ªÅn..."
        if [ "$(id -u)" = "0" ]; then
            chown -R odoo:odoo "$filestore_path"
        fi
        chmod -R 775 "$filestore_path"
    fi
}

# === MAIN EXECUTION ===

# Th√™m error handling ƒë·ªÉ tr√°nh restart loop
handle_error() {
    echo "‚ùå L·ªói x·∫£y ra trong qu√° tr√¨nh kh·ªüi t·∫°o: $1"
    echo "‚è∏Ô∏è T·∫°m d·ª´ng 30 gi√¢y ƒë·ªÉ tr√°nh restart loop..."
    sleep 30
    exit 1
}

# S·ª≠a l·ªói th∆∞ vi·ªán Python tr∆∞·ªõc
echo "üîÑ B∆∞·ªõc 1: Ki·ªÉm tra th∆∞ vi·ªán Python..."
if ! fix_python_issues; then
    handle_error "L·ªói khi ki·ªÉm tra th∆∞ vi·ªán Python"
fi

# Lu√¥n thi·∫øt l·∫≠p th∆∞ m·ª•c v√† c·∫•u h√¨nh
echo "üîÑ B∆∞·ªõc 2: Thi·∫øt l·∫≠p th∆∞ m·ª•c..."
if ! setup_directories; then
    handle_error "L·ªói khi thi·∫øt l·∫≠p th∆∞ m·ª•c"
fi

echo "üîÑ B∆∞·ªõc 3: T·∫°o file c·∫•u h√¨nh..."
if ! setup_config; then
    handle_error "L·ªói khi t·∫°o file c·∫•u h√¨nh"
fi

# Ki·ªÉm tra PostgreSQL
echo "üîÑ B∆∞·ªõc 4: Ki·ªÉm tra PostgreSQL..."
if ! check_postgres; then
    echo "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi PostgreSQL, nh∆∞ng s·∫Ω ti·∫øp t·ª•c kh·ªüi ƒë·ªông..."
else
    echo "üîÑ B∆∞·ªõc 5: Ki·ªÉm tra database..."
    # Ki·ªÉm tra tr·∫°ng th√°i database
    db_status=$(check_database_status)
    db_exists=$(echo $db_status | cut -d',' -f1)
    db_initialized=$(echo $db_status | cut -d',' -f2)

    # Ch·ªâ kh·ªüi t·∫°o database khi th·ª±c s·ª± c·∫ßn thi·∫øt
    if [ "$db_exists" = "false" ] || [ "$db_initialized" = "false" ]; then
        if [ ! -f "$DB_READY_MARKER" ]; then
            echo "üÜï Database ch∆∞a s·∫µn s√†ng, th·ª±c hi·ªán kh·ªüi t·∫°o..."
            if ! initialize_database; then
                handle_error "L·ªói khi kh·ªüi t·∫°o database"
            fi
        else
            echo "‚úÖ Database marker t·ªìn t·∫°i, b·ªè qua kh·ªüi t·∫°o"
        fi
    else
        echo "‚úÖ Database ƒë√£ s·∫µn s√†ng, b·ªè qua kh·ªüi t·∫°o"
    fi
fi

# Ki·ªÉm tra filestore nhanh
echo "üîÑ B∆∞·ªõc 6: Ki·ªÉm tra filestore..."
if ! quick_filestore_check; then
    echo "‚ö†Ô∏è L·ªói khi ki·ªÉm tra filestore, nh∆∞ng s·∫Ω ti·∫øp t·ª•c..."
fi

# T·∫°o marker t·ªïng th·ªÉ
touch "$INIT_MARKER"

echo "üöÄ Kh·ªüi ƒë·ªông Odoo v·ªõi HTTP server ƒë∆∞·ª£c t·ªëi ∆∞u..."

# Ki·ªÉm tra file config m·ªôt l·∫ßn cu·ªëi
if [ ! -f "/etc/odoo/odoo.conf" ]; then
    handle_error "File c·∫•u h√¨nh kh√¥ng t·ªìn t·∫°i"
fi

echo "‚úÖ T·∫•t c·∫£ c√°c b∆∞·ªõc ki·ªÉm tra ƒë√£ ho√†n th√†nh!"
echo "üí° B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông Odoo server..."

# Ch·∫°y Odoo v·ªõi tham s·ªë HTTP server ƒë∆∞·ª£c t·ªëi ∆∞u
if [ "$(id -u)" = "0" ]; then
    if [[ "$1" == "odoo" ]] || [[ "$1" == "" ]]; then
        echo "üí° Kh·ªüi ƒë·ªông Odoo server v·ªõi workers=0 v√† proxy_mode..."
        exec gosu odoo $ODOO_CMD -c /etc/odoo/odoo.conf --workers=0 --proxy-mode
    elif [[ "$1" == "-"* ]]; then
        exec gosu odoo $ODOO_CMD "$@"
    else
        exec gosu odoo "$@"
    fi
else
    if [[ "$1" == "odoo" ]] || [[ "$1" == "" ]]; then
        echo "üí° Kh·ªüi ƒë·ªông Odoo server v·ªõi workers=0 v√† proxy_mode..."
        exec $ODOO_CMD -c /etc/odoo/odoo.conf --workers=0 --proxy-mode
    elif [[ "$1" == "-"* ]]; then
        exec $ODOO_CMD "$@"
    else
        exec "$@"
    fi
fi